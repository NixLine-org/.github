name: NixLine Policy Sync (reusable)

on:
  workflow_call:
    inputs:
      baseline_ref:
        description: 'Baseline reference (branch/tag) to sync from'
        required: false
        type: string
        default: 'stable'
      consumption_pattern:
        description: 'Consumption pattern: template-based or direct'
        required: false
        type: string
        default: 'template-based'
      baseline_repo:
        description: 'Baseline repository (for direct consumption pattern)'
        required: false
        type: string
        default: 'NixLine-org/nixline-baseline'
      packs:
        description: 'Comma-separated list of packs to sync (overrides defaults)'
        required: false
        type: string

permissions:
  contents: write
  issues: write

jobs:
  policy-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Check policy compliance
        id: check
        continue-on-error: true
        env:
          NIXLINE_PACKS: ${{ inputs.packs }}
        run: |
          if [ "${{ inputs.consumption_pattern }}" = "template-based" ]; then
            nix run .#check
            CHECK_EXIT_CODE=$?
          else
            nix run "github:${{ inputs.baseline_repo }}?ref=${{ inputs.baseline_ref }}"#check
            CHECK_EXIT_CODE=$?
          fi
          echo "check_result=$CHECK_EXIT_CODE" >> $GITHUB_OUTPUT
          exit 0

      - name: Sync policies if out of date
        id: sync
        if: steps.check.outputs.check_result != '0'
        continue-on-error: true
        env:
          NIXLINE_PACKS: ${{ inputs.packs }}
        run: |
          if [ "${{ inputs.consumption_pattern }}" = "template-based" ]; then
            nix run .#sync
          else
            nix run "github:${{ inputs.baseline_repo }}?ref=${{ inputs.baseline_ref }}"#sync
          fi

      - name: Check for changes
        id: git-check
        if: steps.check.outputs.check_result != '0' && steps.sync.outcome == 'success'
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        id: push
        if: steps.git-check.outputs.has_changes == 'true'
        continue-on-error: true
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "sync policies from baseline

          Automated policy sync from nixline-baseline@${{ inputs.baseline_ref }}"
          git push

      - name: Create issue on sync failure
        if: steps.sync.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Policy sync failed',
              body: `## Policy Sync Failure

            The automated policy sync workflow failed to materialize policies from the baseline.

            **Baseline reference:** \`${{ inputs.baseline_ref }}\`
            **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ### Next Steps

            Review the workflow logs to identify the sync failure. Common causes include:
            - Baseline flake evaluation errors
            - Network issues accessing the baseline repository
            - Invalid policy pack configuration

            Once resolved, the next scheduled sync will retry automatically.`,
              labels: ['automated', 'policy', 'sync-failure']
            });

      - name: Create issue on push failure
        if: steps.push.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Policy sync push failed',
              body: `## Policy Sync Push Failure

            The automated policy sync successfully materialized policies but failed to push changes.

            **Baseline reference:** \`${{ inputs.baseline_ref }}\`
            **Workflow run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ### Next Steps

            Review the workflow logs to identify the push failure. Common causes include:
            - Branch protection rules blocking direct pushes
            - Merge conflicts with remote changes
            - Permission issues with GITHUB_TOKEN

            Once resolved, the next scheduled sync will retry automatically.`,
              labels: ['automated', 'policy', 'sync-failure']
            });

      - name: Policy sync complete
        if: steps.check.outputs.check_result == '0'
        run: |
          echo "Policies are already in sync with baseline"
