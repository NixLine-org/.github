#
# Test Dependabot Updates
#
# Dynamically tests updated GitHub Actions dependencies from Dependabot PRs.
# Parses PR titles to extract action names and versions, then runs smoke tests
# to ensure the updated actions work correctly before merging.
#
# Triggered by: Dependabot pull requests
# Purpose: Prevent breaking changes from dependency updates
#

name: Test Dependabot Updates

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Note: Job only runs for Dependabot PRs via if condition

permissions:
  contents: read

jobs:
  detect-and-test:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract updated action from PR title
        id: extract
        run: |
          # Parse PR title format: "deps(deps): bump actions/checkout from 4 to 5"
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          # Extract action name (e.g., "actions/checkout")
          if [[ $PR_TITLE =~ bump[[:space:]]+([^[:space:]]+)[[:space:]]+from ]]; then
            ACTION="${BASH_REMATCH[1]}"
            echo "action=$ACTION" >> $GITHUB_OUTPUT
            echo "Detected action: $ACTION"
          else
            echo "Could not parse action from PR title"
            exit 1
          fi

          # Extract target version (e.g., "5" from "from 4 to 5")
          if [[ $PR_TITLE =~ to[[:space:]]+([0-9]+(\.[0-9]+)*) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Detected version: $VERSION"
          else
            echo "Could not parse version from PR title"
            exit 1
          fi

      - name: Test DeterminateSystems actions
        if: ${{ contains(steps.extract.outputs.action, 'DeterminateSystems') }}
        run: |
          echo "Testing DeterminateSystems action: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          # Verify the action version exists on GitHub
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ DeterminateSystems action ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }} is available"

          # Test specific DeterminateSystems actions functionality
          case "${{ steps.extract.outputs.action }}" in
            "DeterminateSystems/nix-installer-action")
              echo "Testing nix-installer-action functionality..."
              # This action installs Nix, so we can't fully test without affecting the runner
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ nix-installer-action definition is accessible"
              ;;
            "DeterminateSystems/magic-nix-cache-action")
              echo "Testing magic-nix-cache-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ magic-nix-cache-action definition is accessible"
              ;;
            "DeterminateSystems/flake-checker-action")
              echo "Testing flake-checker-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ flake-checker-action definition is accessible"
              ;;
            "DeterminateSystems/update-flake-lock")
              echo "Testing update-flake-lock functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ update-flake-lock definition is accessible"
              ;;
            "DeterminateSystems/determinate-nix-action")
              echo "Testing determinate-nix-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ determinate-nix-action definition is accessible"
              ;;
            *)
              echo "Testing generic DeterminateSystems action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ Action definition is accessible"
              ;;
          esac

      - name: Test actions/checkout
        if: ${{ steps.extract.outputs.action == 'actions/checkout' }}
        run: |
          echo "Testing actions/checkout@v${{ steps.extract.outputs.version }}"
          # Test checkout by using the detected version
          curl -f "https://api.github.com/repos/actions/checkout/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/checkout@v${{ steps.extract.outputs.version }} is available"

      - name: Test actions/setup-node
        if: ${{ steps.extract.outputs.action == 'actions/setup-node' }}
        run: |
          echo "Testing actions/setup-node@v${{ steps.extract.outputs.version }}"
          # Test by verifying the version exists
          curl -f "https://api.github.com/repos/actions/setup-node/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/setup-node@v${{ steps.extract.outputs.version }} is available"

      - name: Test actions/setup-python
        if: ${{ steps.extract.outputs.action == 'actions/setup-python' }}
        run: |
          echo "Testing actions/setup-python@v${{ steps.extract.outputs.version }}"
          # Test by verifying the version exists
          curl -f "https://api.github.com/repos/actions/setup-python/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/setup-python@v${{ steps.extract.outputs.version }} is available"

      - name: Test actions/upload-artifact
        if: ${{ steps.extract.outputs.action == 'actions/upload-artifact' }}
        run: |
          echo "Testing actions/upload-artifact@v${{ steps.extract.outputs.version }}"
          # Test by verifying the version exists
          curl -f "https://api.github.com/repos/actions/upload-artifact/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/upload-artifact@v${{ steps.extract.outputs.version }} is available"

      - name: Test peter-evans actions
        if: ${{ contains(steps.extract.outputs.action, 'peter-evans') }}
        run: |
          echo "Testing peter-evans action: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          echo "Note: peter-evans actions require write permissions, testing syntax only"
          # Validate action exists and has correct format
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases" > /dev/null
          echo "Action repository is accessible"

      - name: Test GitHub CodeQL action
        if: ${{ contains(steps.extract.outputs.action, 'github/codeql-action') }}
        run: |
          echo "Testing CodeQL action: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          # CodeQL actions require specific setup, testing availability only
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases" > /dev/null
          echo "CodeQL action repository is accessible"

      - name: Test lewagon/wait-on-check-action
        if: ${{ steps.extract.outputs.action == 'lewagon/wait-on-check-action' }}
        run: |
          echo "Testing wait-on-check-action: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          # This action requires specific inputs, testing availability only
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases" > /dev/null
          echo "wait-on-check-action repository is accessible"

      - name: Test actions/cache
        if: ${{ steps.extract.outputs.action == 'actions/cache' }}
        run: |
          echo "Testing actions/cache@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/actions/cache/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/cache@v${{ steps.extract.outputs.version }} is available"

      - name: Test actions/github-script
        if: ${{ steps.extract.outputs.action == 'actions/github-script' }}
        run: |
          echo "Testing actions/github-script@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/actions/github-script/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ actions/github-script@v${{ steps.extract.outputs.version }} is available"

      - name: Test cachix/install-nix-action
        if: ${{ steps.extract.outputs.action == 'cachix/install-nix-action' }}
        run: |
          echo "Testing cachix/install-nix-action@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/cachix/install-nix-action/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ cachix/install-nix-action@v${{ steps.extract.outputs.version }} is available"

      - name: Test dependabot/fetch-metadata
        if: ${{ steps.extract.outputs.action == 'dependabot/fetch-metadata' }}
        run: |
          echo "Testing dependabot/fetch-metadata@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/dependabot/fetch-metadata/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ dependabot/fetch-metadata@v${{ steps.extract.outputs.version }} is available"

      - name: Test hmarr/auto-approve-action
        if: ${{ steps.extract.outputs.action == 'hmarr/auto-approve-action' }}
        run: |
          echo "Testing hmarr/auto-approve-action@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/hmarr/auto-approve-action/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ hmarr/auto-approve-action@v${{ steps.extract.outputs.version }} is available"

      - name: Test wagoid/commitlint-github-action
        if: ${{ steps.extract.outputs.action == 'wagoid/commitlint-github-action' }}
        run: |
          echo "Testing wagoid/commitlint-github-action@v${{ steps.extract.outputs.version }}"
          curl -f "https://api.github.com/repos/wagoid/commitlint-github-action/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ wagoid/commitlint-github-action@v${{ steps.extract.outputs.version }} is available"

      - name: Test aquasecurity/trivy-action
        if: ${{ steps.extract.outputs.action == 'aquasecurity/trivy-action' }}
        run: |
          echo "Testing aquasecurity/trivy-action@${{ steps.extract.outputs.version }}"
          # Note: trivy-action often uses @master, but test version if specified
          if [[ "${{ steps.extract.outputs.version }}" != "master" ]]; then
            curl -f "https://api.github.com/repos/aquasecurity/trivy-action/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          else
            curl -f "https://api.github.com/repos/aquasecurity/trivy-action" > /dev/null
          fi
          echo "✅ aquasecurity/trivy-action@${{ steps.extract.outputs.version }} is available"

      - name: Test generic action availability
        run: |
          echo "Testing general availability of: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          # Verify the action repository exists and version tag is available
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ Action ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }} is available"