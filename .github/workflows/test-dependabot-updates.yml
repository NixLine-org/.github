#
# Test Dependabot Updates
#
# Dynamically tests updated GitHub Actions dependencies from Dependabot PRs.
# Parses PR titles to extract action names and versions, then runs smoke tests
# to ensure the updated actions work correctly before merging.
#
# Triggered by: Dependabot pull requests
# Purpose: Prevent breaking changes from dependency updates
#

name: Test Dependabot Updates

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Note: Job only runs for Dependabot PRs via if condition

permissions:
  contents: read

jobs:
  detect-and-test:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract updated action from PR title
        id: extract
        run: |
          # Parse PR title format: "deps(deps): bump actions/checkout from 4 to 5"
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          # Extract action name (e.g., "actions/checkout")
          if [[ $PR_TITLE =~ bump[[:space:]]+([^[:space:]]+)[[:space:]]+from ]]; then
            ACTION="${BASH_REMATCH[1]}"
            echo "action=$ACTION" >> $GITHUB_OUTPUT
            echo "Detected action: $ACTION"
          else
            echo "Could not parse action from PR title"
            exit 1
          fi

          # Extract target version (e.g., "5" from "from 4 to 5")
          if [[ $PR_TITLE =~ to[[:space:]]+([0-9]+(\.[0-9]+)*) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Detected version: $VERSION"
          else
            echo "Could not parse version from PR title"
            exit 1
          fi

      - name: Test DeterminateSystems actions
        if: ${{ contains(steps.extract.outputs.action, 'DeterminateSystems') }}
        run: |
          echo "Testing DeterminateSystems action: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"
          # Verify the action version exists on GitHub
          curl -f "https://api.github.com/repos/${{ steps.extract.outputs.action }}/releases/tags/v${{ steps.extract.outputs.version }}" > /dev/null
          echo "✅ DeterminateSystems action ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }} is available"

          # Test specific DeterminateSystems actions functionality
          case "${{ steps.extract.outputs.action }}" in
            "DeterminateSystems/nix-installer-action")
              echo "Testing nix-installer-action functionality..."
              # This action installs Nix, so we can't fully test without affecting the runner
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ nix-installer-action definition is accessible"
              ;;
            "DeterminateSystems/magic-nix-cache-action")
              echo "Testing magic-nix-cache-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ magic-nix-cache-action definition is accessible"
              ;;
            "DeterminateSystems/flake-checker-action")
              echo "Testing flake-checker-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ flake-checker-action definition is accessible"
              ;;
            "DeterminateSystems/update-flake-lock")
              echo "Testing update-flake-lock functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ update-flake-lock definition is accessible"
              ;;
            "DeterminateSystems/determinate-nix-action")
              echo "Testing determinate-nix-action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ determinate-nix-action definition is accessible"
              ;;
            *)
              echo "Testing generic DeterminateSystems action functionality..."
              curl -f "https://raw.githubusercontent.com/${{ steps.extract.outputs.action }}/v${{ steps.extract.outputs.version }}/action.yml" > /dev/null
              echo "✅ Action definition is accessible"
              ;;
          esac

      - name: Test actions/checkout
        if: ${{ steps.extract.outputs.action == 'actions/checkout' }}
        run: |
          echo "Testing actions/checkout@v${{ steps.extract.outputs.version }}"
          VERSION="${{ steps.extract.outputs.version }}"

          # Try multiple version formats for checkout
          if curl -f "https://api.github.com/repos/actions/checkout/releases/tags/v$VERSION" > /dev/null 2>&1; then
            echo "✅ actions/checkout@v$VERSION is available"
          elif curl -f "https://api.github.com/repos/actions/checkout/releases/tags/v$VERSION.0.0" > /dev/null 2>&1; then
            echo "✅ actions/checkout@v$VERSION.0.0 is available"
          else
            echo "❌ Could not find actions/checkout version $VERSION"
            exit 1
          fi

      - name: Test actions/setup-node
        if: ${{ steps.extract.outputs.action == 'actions/setup-node' }}
        run: |
          echo "Testing actions/setup-node@v${{ steps.extract.outputs.version }}"
          VERSION="${{ steps.extract.outputs.version }}"

          # Try multiple version formats for setup-node
          if curl -f "https://api.github.com/repos/actions/setup-node/releases/tags/v$VERSION" > /dev/null 2>&1; then
            echo "✅ actions/setup-node@v$VERSION is available"
          elif curl -f "https://api.github.com/repos/actions/setup-node/releases/tags/v$VERSION.0.0" > /dev/null 2>&1; then
            echo "✅ actions/setup-node@v$VERSION.0.0 is available"
          else
            echo "❌ Could not find actions/setup-node version $VERSION"
            exit 1
          fi

      - name: Test actions/setup-python
        if: ${{ steps.extract.outputs.action == 'actions/setup-python' }}
        run: |
          echo "Testing actions/setup-python@v${{ steps.extract.outputs.version }}"
          VERSION="${{ steps.extract.outputs.version }}"

          # Try multiple version formats for setup-python
          if curl -f "https://api.github.com/repos/actions/setup-python/releases/tags/v$VERSION" > /dev/null 2>&1; then
            echo "✅ actions/setup-python@v$VERSION is available"
          elif curl -f "https://api.github.com/repos/actions/setup-python/releases/tags/v$VERSION.0.0" > /dev/null 2>&1; then
            echo "✅ actions/setup-python@v$VERSION.0.0 is available"
          else
            echo "❌ Could not find actions/setup-python version $VERSION"
            echo "Checking what versions are available..."
            curl -s "https://api.github.com/repos/actions/setup-python/releases" | grep -o '"tag_name": "v[^"]*"' | head -5
            exit 1
          fi

      - name: Test standard GitHub actions and third-party actions
        run: |
          ACTION="${{ steps.extract.outputs.action }}"
          VERSION="${{ steps.extract.outputs.version }}"

          # Function to test action versions with multiple format attempts
          test_action_version() {
            local action=$1
            local version=$2

            echo "Testing $action@v$version"

            # Try exact version first (v6)
            if curl -f "https://api.github.com/repos/$action/releases/tags/v$version" > /dev/null 2>&1; then
              echo "✅ $action@v$version is available"
              return 0
            fi

            # Try semantic version (v6.0.0)
            if curl -f "https://api.github.com/repos/$action/releases/tags/v$version.0.0" > /dev/null 2>&1; then
              echo "✅ $action@v$version.0.0 is available"
              return 0
            fi

            # Try without v prefix
            if curl -f "https://api.github.com/repos/$action/releases/tags/$version" > /dev/null 2>&1; then
              echo "✅ $action@$version is available"
              return 0
            fi

            # Try semantic without v
            if curl -f "https://api.github.com/repos/$action/releases/tags/$version.0.0" > /dev/null 2>&1; then
              echo "✅ $action@$version.0.0 is available"
              return 0
            fi

            echo "❌ Could not find $action version $version"
            return 1
          }

          # Test the action based on its type
          case "$ACTION" in
            "actions/upload-artifact"|"actions/cache"|"actions/github-script"|"cachix/install-nix-action"|"dependabot/fetch-metadata"|"hmarr/auto-approve-action"|"wagoid/commitlint-github-action")
              test_action_version "$ACTION" "$VERSION"
              ;;
            "peter-evans/"*)
              echo "Testing peter-evans action: $ACTION@v$VERSION"
              echo "Note: peter-evans actions require write permissions, testing availability only"
              curl -f "https://api.github.com/repos/$ACTION/releases" > /dev/null
              echo "✅ $ACTION repository is accessible"
              ;;
            "github/codeql-action/"*)
              echo "Testing CodeQL action: $ACTION@v$VERSION"
              curl -f "https://api.github.com/repos/$ACTION/releases" > /dev/null
              echo "✅ CodeQL action repository is accessible"
              ;;
            "lewagon/wait-on-check-action")
              echo "Testing wait-on-check-action: $ACTION@v$VERSION"
              curl -f "https://api.github.com/repos/$ACTION/releases" > /dev/null
              echo "✅ wait-on-check-action repository is accessible"
              ;;
            "aquasecurity/trivy-action")
              echo "Testing aquasecurity/trivy-action@$VERSION"
              if [[ "$VERSION" != "master" ]]; then
                test_action_version "$ACTION" "$VERSION"
              else
                curl -f "https://api.github.com/repos/$ACTION" > /dev/null
                echo "✅ trivy-action@master is accessible"
              fi
              ;;
            *)
              echo "Skipping standard test - handled by specific action tests or generic test"
              ;;
          esac

      - name: Test generic action availability
        run: |
          echo "Testing general availability of: ${{ steps.extract.outputs.action }}@v${{ steps.extract.outputs.version }}"

          # Try multiple version formats to handle semantic versioning
          VERSION="${{ steps.extract.outputs.version }}"
          ACTION="${{ steps.extract.outputs.action }}"

          # First try exact version (v6)
          if curl -f "https://api.github.com/repos/$ACTION/releases/tags/v$VERSION" > /dev/null 2>&1; then
            echo "✅ Found exact version: $ACTION@v$VERSION"
            exit 0
          fi

          # Try with .0.0 suffix (v6.0.0)
          if curl -f "https://api.github.com/repos/$ACTION/releases/tags/v$VERSION.0.0" > /dev/null 2>&1; then
            echo "✅ Found semantic version: $ACTION@v$VERSION.0.0"
            exit 0
          fi

          # Try without v prefix (6, 6.0.0)
          if curl -f "https://api.github.com/repos/$ACTION/releases/tags/$VERSION" > /dev/null 2>&1; then
            echo "✅ Found version without v prefix: $ACTION@$VERSION"
            exit 0
          fi

          if curl -f "https://api.github.com/repos/$ACTION/releases/tags/$VERSION.0.0" > /dev/null 2>&1; then
            echo "✅ Found semantic version without v: $ACTION@$VERSION.0.0"
            exit 0
          fi

          # If none work, fail with clear error
          echo "❌ Could not find any valid version tag for $ACTION version $VERSION"
          echo "Tried: v$VERSION, v$VERSION.0.0, $VERSION, $VERSION.0.0"
          exit 1